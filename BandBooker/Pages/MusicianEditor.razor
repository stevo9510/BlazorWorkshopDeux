@using Microsoft.AspNetCore.Components.Web
@using Data
@using BandBookerData.Models
@using System.IO;
@using Blazor.FileReader;
@inject IFileReaderService fileReaderService;
@inject IJSRuntime js;


@if (@Musician != null && showMusicianPanel == true)
{
    <div style="background-color:lightgray;">
        <div style="padding:1vw;">
            <EditForm Model="@Musician" OnValidSubmit="@SubmitButtonPressed">
                <DataAnnotationsValidator />
                <ValidationSummary />
                Name:
                <InstantInputText @bind-Value="@Musician.Name"
                                                   id="musician.name"
                                                   type="text" style="width:100%;" />
                <br /><br />
                Email:
                <InstantInputText @bind-Value="@Musician.Email"
                                                   type="text" style="width:100%;" />
                <br /><br />
                Mobile Phone:
                <InstantInputText @bind-Value="@Musician.MobilePhone"
                                                   type="text" style="width:100%;" />
                <br /><br />
                Bio:
                <textarea id="BioControl" @bind="@Musician.Bio" bind:event="oninput" @oninput="SyncMusicianBio" rows="4"
                          style="width:100%;overflow:hidden;overflow-wrap:break-word;overflow-y:scroll;" />
                <br />
                <ObjectPicker ItemType="Instrument"
                              ItemTypePlural="Instruments"
                              TextPropertyName="@nameof(Instrument.Name)"
                              ValuePropertyName="@nameof(Instrument.InstrumentId)"
                              AllItems="@AllInstruments"
                              SelectedItems="@SelectedInstruments">
                </ObjectPicker>
                <br />
                Photo:
                <br />
                <input type="file" @ref=inputTypeFileElement />
                <button type="button" @onclick=ReadFile>Upload</button>
                <br />
                @if (@Musician.PhotoUrl != "")
                {
                    <img src="@Musician.PhotoUrl" />
                }
                <br /><br />
                <button type="submit">@submitButtonText</button>
                <span>&nbsp;</span>
                <button type="button" @onclick="CancelButtonPressed">Cancel</button>
            </EditForm>

        </div>
    </div>
}


@code {

    private List<Instrument> AllInstruments { get; set; }

    [Parameter]
    public EventCallback<string> CancelPressed { get; set; }

    [Parameter]
    public EventCallback<Musician> MusicianAdded { get; set; }

    [Parameter]
    public EventCallback<Musician> MusicianUpdated { get; set; }

    [Parameter]
    public EventCallback<string> BioUpdated { get; set; }

    private List<Instrument> SelectedInstruments { get; set; } = new List<Instrument>();

    private Musician Musician { get; set; } = new Musician();
    private bool showMusicianPanel = false;
    private ElementReference inputTypeFileElement;
    private bool adding = false;
    private string submitButtonText = "";


    public void Hide()
    {
        showMusicianPanel = false;
    }

    public async Task ReadFile()
    {
        string filename = "wwwroot/images/";

        foreach (var file in await fileReaderService.CreateReference(inputTypeFileElement).EnumerateFilesAsync())
        {
            // Read into buffer and act (uses less memory)
            using (Stream stream = await file.OpenReadAsync())
            {
                var buffer = new byte[stream.Length];
                await stream.ReadAsync(buffer, 0, buffer.Length);

                var info = await file.ReadFileInfoAsync();
                var extension = Path.GetExtension(filename + info.Name);
                var name = $@"{Guid.NewGuid()}" + extension;
                filename += name;

                using (Stream outfile = System.IO.File.OpenWrite(filename))
                {
                    outfile.Write(buffer, 0, buffer.Length);
                }
                ImageResizer.ResizeAndSaveImage(filename, 200);
                Musician.PhotoUrl = "/images/" + name;
            }
        }
    }

    public async Task NewMusician(List<Instrument> instruments)
    {
        this.Musician = new Musician();
        AllInstruments = instruments;
        SelectedInstruments = new List<Instrument>();
        adding = true;
        submitButtonText = "Add";
        showMusicianPanel = true;
        await js.InvokeVoidAsync("SetFocus", "musician.name");
    }

    public async Task EditMusician(List<Instrument> instruments, Musician musician)
    {
        AllInstruments = instruments;
        adding = false;
        SelectedInstruments = new List<Instrument>();
        SelectedInstruments.AddRange(musician.MusicianInstrument.Select(mi => mi.Instrument));
        submitButtonText = "Update";
        this.Musician = musician;
        showMusicianPanel = true;
        await js.InvokeVoidAsync("SetFocus", "musician.name");
    }

    public void UpdateMusicianBio(int musicianId, string bio)
    {
        if (Musician != null && Musician.MusicianId == musicianId)
        {
            Musician.Bio = bio;
            StateHasChanged();
        }
    }

    private async Task SubmitButtonPressed()
    {
        // Clear musician's instruments and add the selected instruments
        this.Musician.MusicianInstrument.Clear();
        foreach (var instrument in SelectedInstruments)
        {
            this.Musician.MusicianInstrument.Add(
                new MusicianInstrument
                {
                    Instrument = instrument,
                    InstrumentId = instrument.InstrumentId,
                    Musician = this.Musician,
                    MusicianId = this.Musician.MusicianId
                });
        }

        if (adding)
        {
            await MusicianAdded.InvokeAsync(this.Musician);
        }
        else
        {
            await MusicianUpdated.InvokeAsync(this.Musician);
        }
    }

    private async Task CancelButtonPressed()
    {
        showMusicianPanel = false;
        await CancelPressed.InvokeAsync("");
    }

    public async Task SyncMusicianBio(ChangeEventArgs e)
    {
        try
        {
            await BioUpdated.InvokeAsync(e.Value.ToString());
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}
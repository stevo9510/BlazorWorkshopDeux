@page "/"
@using BandBookerData;
@using BandBookerData.Models;
@using Microsoft.AspNetCore.Components;

<h2>Instruments</h2>
<select size="10" style="width:100%;"
        disabled="@disableInstrumentList"
        @onchange="OnInstrumentSelected">
    @foreach (var instrument in allInstruments)
    {
        @if (instrument.InstrumentId == selectedInstrument?.InstrumentId)
        {
            <option selected="selected" value="@instrument.InstrumentId">
                @instrument.Name
            </option>
        }
        else
        {
            <option value="@instrument.InstrumentId">
                @instrument.Name
            </option>
        }
    }

</select>
<br />
<button disabled="@disableInstrumentList" @onclick="NewInstrumentClicked">New</button>
<button disabled="@disableEditInstrument" @onclick="EditInstrumentClicked">Edit</button>
<button disabled="@disableEditInstrument" @onclick="DeleteInstrumentClicked">Delete</button>
<br />
<span style="color:red">@instrumentErrorMessage</span>

@code {
    private bool disableInstrumentList = false;
    private bool disableEditInstrument = true;
    private string instrumentErrorMessage;
    private Instrument selectedInstrument;
    private List<Instrument> allInstruments = new List<Instrument>();

    protected override void OnInitialized()
    {
        allInstruments = DataManager.Instruments;
    }

    private void OnInstrumentSelected(ChangeEventArgs changeEventArgs)
    {
        if(int.TryParse(changeEventArgs.Value?.ToString(), out int instrumentId))
        {
            selectedInstrument = allInstruments.Where(inst => inst.InstrumentId == instrumentId).FirstOrDefault();
            string instrumentName = selectedInstrument?.Name;
            disableEditInstrument = false;
        }
        else
        {
            disableEditInstrument = true;
        }
    }

    private void NewInstrumentClicked()
    {

    }

    private void EditInstrumentClicked()
    {

    }

    private void DeleteInstrumentClicked()
    {
        if(selectedInstrument != null)
        {
            instrumentErrorMessage = DataManager.DeleteInstrument(selectedInstrument);
            if (string.IsNullOrWhiteSpace(instrumentErrorMessage))
            {
                allInstruments.Remove(selectedInstrument);
                selectedInstrument = allInstruments.FirstOrDefault();
            }
        }
    }
}
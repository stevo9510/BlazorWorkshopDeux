@page "/"
@using BandBookerData;
@using BandBookerData.Models;
@using Microsoft.AspNetCore.Components;
@using BandBooker.Data;
@using Microsoft.AspNetCore.SignalR.Client;

<h2>Instruments</h2>
<select size="10" style="width:100%;"
        disabled="@disableInstrumentList"
        @onchange="OnInstrumentSelected">
    @foreach (var instrument in allInstruments)
    {
        @if (instrument.InstrumentId == selectedInstrument?.InstrumentId)
        {
            <option selected="selected" value="@instrument.InstrumentId">
                @instrument.Name
            </option>
        }
        else
        {
            <option value="@instrument.InstrumentId">
                @instrument.Name
            </option>
        }
    }

</select>
<br />
<button disabled="@disableInstrumentList" @onclick="NewInstrumentClicked">New</button>
<button disabled="@disableEditInstrument" @onclick="EditInstrumentClicked">Edit</button>
<button disabled="@disableEditInstrument" @onclick="DeleteInstrumentClicked">Delete</button>
<br />
<span style="color:red">@instrumentErrorMessage</span>

<InstrumentEditor @ref="instrumentEditor" Instrument="selectedInstrument" AddInstrumentClicked="InstrumentEditor_AddInstrumentClicked"
                  UpdateInstrumentClicked="InstrumentEditor_UpdateInstrumentClicked" CancelClicked="InstrumentEditor_CancelClicked" />

<h2>Musicians</h2>
<select @onchange="MusicianSelected" size="10" style="width:100%;" disabled="@DisableMusicianControls">
    @foreach (var musician in DataManager.Musicians)
    {
        if (SelectedMusician != null
         && musician.MusicianId == SelectedMusician.MusicianId)
        {
            <option selected value="@musician.MusicianId.ToString()">@musician.Name</option>
        }
        else
        {
            <option value="@musician.MusicianId.ToString()">@musician.Name</option>
        }
    }
</select>
<br />

<button disabled="@DisableMusicianControls"
            @onclick="NewMusicianButtonClick">
    New
</button>
<span>&nbsp;</span>

<button disabled="@DisableMusicianEditButton"
            @onclick="EditMusicianButtonClick">
    Edit
</button>
<span>&nbsp;</span>

<button disabled="@DisableMusicianEditButton"
            @onclick="DeleteMusicianButtonClick">
    Delete
</button>
<br />

<span style="color:red;">@MusicianErrorMessage</span>
<MusicianEditor @ref="musicianEditor"
                        CancelPressed="EditMusicianCancelled"
                        MusicianAdded="MusicianAdded"
                        MusicianUpdated="MusicianUpdated"
                BioUpdated="MusicianBioUpdated">
</MusicianEditor>
<br />
<br />

<h2>Bands</h2>
<select @onchange="BandSelected" size="10" style="width:100%;" disabled="@DisableBandControls">
    @foreach (var band in DataManager.Bands)
    {
        if (SelectedBand != null
            && SelectedBand.BandId == band.BandId)
        {
            <option selected value="@band.BandId.ToString()">@band.Name</option>
        }
        else
        {
            <option value="@band.BandId.ToString()">@band.Name</option>
        }
    }
</select>
<br />
<button disabled="@DisableBandControls" @onclick="NewBandButtonClick">New</button>
<span>&nbsp;</span>
<button disabled="@DisableBandEditButton" @onclick="EditBandButtonClick">Edit</button>
<span>&nbsp;</span>
<button disabled="@DisableBandEditButton" @onclick="DeleteBandButtonClick">Delete</button>
<br />
<span style="color:red;">@BandErrorMessage</span>
<BandEditor @ref="bandEditor"
            CancelPressed="EditBandCancelled"
            BandAdded="BandAdded"
            BandUpdated="BandUpdated">
</BandEditor>

<br />
<br />
<h2>Venues</h2>
<select @onchange="VenueSelected" size="10" style="width:100%;" disabled="@DisableVenueControls">
    @foreach (var Venue in DataManager.Venues)
    {
        if (SelectedVenue != null
            && SelectedVenue.VenueId == Venue.VenueId)
        {
            <option selected value="@Venue.VenueId.ToString()">@Venue.Name</option>
        }
        else
        {
            <option value="@Venue.VenueId.ToString()">@Venue.Name</option>
        }
    }
</select>
<br />
<button disabled="@DisableVenueControls" @onclick="NewVenueButtonClick">New</button>
<span>&nbsp;</span>
<button disabled="@DisableVenueEditButton" @onclick="EditVenueButtonClick">Edit</button>
<span>&nbsp;</span>
<button disabled="@DisableVenueEditButton" @onclick="DeleteVenueButtonClick">Delete</button>
<br />
<span style="color:red;">@VenueErrorMessage</span>
<VenueEditor @ref="venueEditor"
             CancelPressed="EditVenueCancelled"
             VenueAdded="VenueAdded"
             VenueUpdated="VenueUpdated">
</VenueEditor>
@code {

    private HubConnection connection;

    protected async override Task OnInitializedAsync()
    {
        allInstruments = await ApiService.GetInstruments();

        connection = new HubConnectionBuilder()
            .WithUrl("https://localhost:44324/adminHub")
            .Build();

        connection.On<int, string>("ReceiveSyncMusicianBio", this.OnReceiveSyncMusicianBio);

        try
        {
            await connection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    #region Instruments

    private InstrumentEditor instrumentEditor;
    private bool disableInstrumentList = false;
    private bool disableEditInstrument = true;
    private string instrumentErrorMessage;
    private Instrument selectedInstrument;
    private List<Instrument> allInstruments = new List<Instrument>();

    private void OnInstrumentSelected(ChangeEventArgs changeEventArgs)
    {
        if (int.TryParse(changeEventArgs.Value?.ToString(), out int instrumentId))
        {
            selectedInstrument = allInstruments.Where(inst => inst.InstrumentId == instrumentId).FirstOrDefault();
            string instrumentName = selectedInstrument?.Name;
            disableEditInstrument = false;
        }
        else
        {
            disableEditInstrument = true;
        }
    }

    private void InstrumentEditor_AddInstrumentClicked(Instrument instrument)
    {
        DataManager.AddInstrument(instrument);
        EnableInteraction();
        allInstruments = DataManager.Instruments;
        selectedInstrument = allInstruments.Where(inst => inst.InstrumentId == instrument.InstrumentId).FirstOrDefault();
        instrumentEditor.Hide();
    }

    private void InstrumentEditor_UpdateInstrumentClicked(string message)
    {
        selectedInstrument = DataManager.UpdateInstrument(selectedInstrument);
        allInstruments = DataManager.Instruments;

        EnableInteraction();
        instrumentEditor.Hide();
    }

    private void InstrumentEditor_CancelClicked(string message)
    {
        if (selectedInstrument != null)
        {
            selectedInstrument = allInstruments.Where(inst => inst.InstrumentId == selectedInstrument.InstrumentId).FirstOrDefault();
        }

        instrumentErrorMessage = message;
        EnableInteraction();
        instrumentEditor.Hide();
    }

    private async Task NewInstrumentClicked()
    {
        instrumentErrorMessage = string.Empty;
        DisableInteraction();
        selectedInstrument = new Instrument();
        await instrumentEditor.Initialize(true);
    }

    private async Task EditInstrumentClicked()
    {
        DisableInteraction();
        await instrumentEditor.Initialize(false);
    }

    private void DeleteInstrumentClicked()
    {
        if (selectedInstrument != null)
        {
            instrumentErrorMessage = DataManager.DeleteInstrument(selectedInstrument);
            if (string.IsNullOrWhiteSpace(instrumentErrorMessage))
            {
                allInstruments.Remove(selectedInstrument);
                selectedInstrument = allInstruments.FirstOrDefault();
            }
        }
    }

    private void EnableInteraction()
    {
        disableEditInstrument = selectedInstrument == null;
        disableInstrumentList = false;
    }

    private void DisableInteraction()
    {
        disableEditInstrument = true;
        disableInstrumentList = true;
    }

    #endregion

    #region Musicians

    string MusicianErrorMessage = "";
    Musician SelectedMusician;
    MusicianEditor musicianEditor;
    bool DisableMusicianControls = false;
    bool DisableMusicianEditButton = true;

    void EditMusicianCancelled(string message)
    {
        if (SelectedMusician != null)
        {
            SelectedMusician =
               (from x in DataManager.Musicians
                where x.MusicianId == SelectedMusician.MusicianId
                select x).FirstOrDefault();


        }
        DisableMusicianControls = false;
        DisableMusicianEditButton = (SelectedMusician == null);
    }

    void MusicianAdded(Musician Musician)
    {
        DataManager.AddMusician(Musician);
        DisableMusicianControls = false;
        DisableMusicianEditButton = (SelectedMusician == null);
        musicianEditor.Hide();
        MusicianErrorMessage = "";
    }

    void MusicianUpdated(Musician musician)
    {
        SelectedMusician = DataManager.UpdateMusician(musician);
        DisableMusicianControls = false;
        DisableMusicianEditButton = false;
        musicianEditor.Hide();
    }

    void MusicianSelected(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        SelectMusicianById(Convert.ToInt32(args.Value));
    }

    void SelectMusicianById(int Id)
    {
        MusicianErrorMessage = "";


        SelectedMusician =
           (from x in DataManager.Musicians
            where x.MusicianId.ToString() == Id.ToString()
            select x).FirstOrDefault();


        if (SelectedMusician != null)
        {
            DisableMusicianEditButton = false;
        }
        else
            DisableMusicianEditButton = true;
    }

    async Task NewMusicianButtonClick()
    {
        MusicianErrorMessage = "";
        DisableMusicianControls = true;
        DisableMusicianEditButton = true;
        await musicianEditor.NewMusician(DataManager.Instruments);
    }

    async Task EditMusicianButtonClick()
    {
        DisableMusicianControls = true;
        DisableMusicianEditButton = true;
        await musicianEditor.EditMusician(DataManager.Instruments,
          SelectedMusician);
    }

    void DeleteMusicianButtonClick()
    {
        if (SelectedMusician != null)
        {
            MusicianErrorMessage =
              DataManager.DeleteMusician(SelectedMusician, false);
            if (DataManager.Musicians.Count == 1)
            {
                SelectedMusician = DataManager.Musicians.First();
            }
        }
    }

    async Task MusicianBioUpdated(string bio)
    {
        if (SelectedMusician != null)
        {
            await connection.InvokeAsync("SyncMusicianBio", SelectedMusician.MusicianId, bio);
        }
    }

    private void OnReceiveSyncMusicianBio(int musicianId, string bio)
    {
        Musician musician = DataManager.Musicians.Where(m => m.MusicianId == musicianId).FirstOrDefault();

        if (musician != null)
        {
            musicianEditor.UpdateMusicianBio(musicianId, bio);
        }
    }

    #endregion

    #region Bands

    string BandErrorMessage = "";
    Band SelectedBand;
    BandEditor bandEditor;
    bool DisableBandControls = false;
    bool DisableBandEditButton = true;

    void EditBandCancelled(string message)
    {
        if (SelectedBand != null)
        {
            SelectedBand = (from x in DataManager.Bands
                            where x.BandId == SelectedBand.BandId
                            select x).FirstOrDefault();
        }

        DisableBandControls = false;
        DisableBandEditButton = (SelectedBand == null);
        BandErrorMessage = "";
    }

    void BandAdded(Band Band)
    {
        DataManager.AddBand(Band);
        DisableBandControls = false;
        DisableBandEditButton = (SelectedBand == null);
        bandEditor.Hide();
    }

    void BandUpdated(Band Band)
    {
        SelectedBand = DataManager.UpdateBand(Band);
        DisableBandControls = false;
        DisableBandEditButton = false;
        bandEditor.Hide();
    }

    void BandSelected(ChangeEventArgs args)
    {
        SelectBandById(Convert.ToInt32(args.Value));
    }

    void SelectBandById(int Id)
    {
        BandErrorMessage = "";

        SelectedBand = (from x in DataManager.Bands
                        where x.BandId.ToString() == Id.ToString()
                        select x).FirstOrDefault();

        DisableBandEditButton = SelectedBand == null;
    }

    async Task NewBandButtonClick()
    {
        BandErrorMessage = "";
        DisableBandControls = true;
        DisableBandEditButton = true;
        await bandEditor.NewBand(DataManager.Musicians);
    }

    async Task EditBandButtonClick()
    {
        DisableBandControls = true;
        DisableBandEditButton = true;
        await bandEditor.EditBand(DataManager.Musicians, SelectedBand);
    }

    void DeleteBandButtonClick()
    {
        var msg = DataManager.DeleteBand(SelectedBand, false);
        if (msg == "")
        {
            SelectedBand = null;
            DisableBandEditButton = true;
        }
        else
        {
            BandErrorMessage = msg;
        }
    }

    #endregion

    #region Venues

    Venue SelectedVenue;
    VenueEditor venueEditor;
    bool DisableVenueControls = false;
    bool DisableVenueEditButton = true;
    string VenueErrorMessage = "";

    void EditVenueCancelled(string message)
    {
        if (SelectedVenue != null)
        {
            SelectedVenue = (from x in DataManager.Venues
                             where x.VenueId == SelectedVenue.VenueId
                             select x).FirstOrDefault();
        }
        VenueErrorMessage = message;
        DisableVenueControls = false;
        DisableVenueEditButton = (SelectedVenue == null);
    }

    void VenueAdded(Venue venue)
    {
        try
        {
            DataManager.AddVenue(venue);
            DisableVenueControls = false;
            DisableVenueEditButton = (SelectedVenue == null);
            venueEditor.Hide();
        }
        catch (Exception ex)
        {
            VenueErrorMessage = ex.Message;
        }
    }

    void VenueUpdated(Venue venue)
    {
        try
        {
            SelectedVenue = DataManager.UpdateVenue(venue);
            DisableVenueControls = false;
            DisableVenueEditButton = (SelectedVenue == null);
            venueEditor.Hide();
        }
        catch (Exception ex)
        {
            VenueErrorMessage = ex.Message;
        }
    }

    async Task NewVenueButtonClick()
    {
        VenueErrorMessage = "";
        DisableVenueControls = true;
        DisableVenueEditButton = true;
        await venueEditor.NewVenue();
    }

    async Task EditVenueButtonClick()
    {
        DisableVenueControls = true;
        DisableVenueEditButton = true;
        await venueEditor.EditVenue(SelectedVenue);
    }

    void DeleteVenueButtonClick()
    {
        string msg = DataManager.DeleteVenue(SelectedVenue, false);
        if (msg == "")
        {
            SelectedVenue = null;
            DisableVenueEditButton = true;
        }
        else
        {
            VenueErrorMessage = msg;
        }
    }

    void VenueSelected(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        VenueErrorMessage = "";

        SelectedVenue = (from x in DataManager.Venues
                         where x.VenueId.ToString() == args.Value.ToString()
                         select x).FirstOrDefault();
        if (SelectedVenue != null)
            DisableVenueEditButton = false;
        else
            DisableVenueEditButton = true;
    }

    #endregion

}
@page "/"
@using BandBookerData;
@using BandBookerData.Models;
@using Microsoft.AspNetCore.Components;

<h2>Instruments</h2>
<select size="10" style="width:100%;"
        disabled="@disableInstrumentList"
        @onchange="OnInstrumentSelected">
    @foreach (var instrument in allInstruments)
    {
        @if (instrument.InstrumentId == selectedInstrument?.InstrumentId)
        {
            <option selected="selected" value="@instrument.InstrumentId">
                @instrument.Name
            </option>
        }
        else
        {
            <option value="@instrument.InstrumentId">
                @instrument.Name
            </option>
        }
    }

</select>
<br />
<button disabled="@disableInstrumentList" @onclick="NewInstrumentClicked">New</button>
<button disabled="@disableEditInstrument" @onclick="EditInstrumentClicked">Edit</button>
<button disabled="@disableEditInstrument" @onclick="DeleteInstrumentClicked">Delete</button>
<br />
<span style="color:red">@instrumentErrorMessage</span>

<InstrumentEditor @ref="instrumentEditor" Instrument="selectedInstrument" AddInstrumentClicked="InstrumentEditor_AddInstrumentClicked"
                  UpdateInstrumentClicked="InstrumentEditor_UpdateInstrumentClicked" CancelClicked="InstrumentEditor_CancelClicked" />

<h2>Musicians</h2>
<select @onchange="MusicianSelected" size="10" style="width:100%;" disabled="@DisableMusicianControls">
    @foreach (var musician in DataManager.Musicians)
    {
        if (SelectedMusician != null
         && musician.MusicianId == SelectedMusician.MusicianId)
        {
            <option selected value="@musician.MusicianId.ToString()">@musician.Name</option>
        }
        else
        {
            <option value="@musician.MusicianId.ToString()">@musician.Name</option>
        }
    }
</select>
<br />

<button disabled="@DisableMusicianControls"
            @onclick="NewMusicianButtonClick">
    New
</button>
<span>&nbsp;</span>

<button disabled="@DisableMusicianEditButton"
            @onclick="EditMusicianButtonClick">
    Edit
</button>
<span>&nbsp;</span>

<button disabled="@DisableMusicianEditButton"
            @onclick="DeleteMusicianButtonClick">
    Delete
</button>
<br />

<span style="color:red;">@MusicianErrorMessage</span>
<MusicianEditor @ref="musicianEditor"
                        CancelPressed="EditMusicianCancelled"
                        MusicianAdded="MusicianAdded"
                        MusicianUpdated="MusicianUpdated"
                        >
</MusicianEditor>
<br />
<br />

@code {

    #region Instruments

    private InstrumentEditor instrumentEditor;
    private bool disableInstrumentList = false;
    private bool disableEditInstrument = true;
    private string instrumentErrorMessage;
    private Instrument selectedInstrument;
    private List<Instrument> allInstruments = new List<Instrument>();

    protected override void OnInitialized()
    {
        allInstruments = DataManager.Instruments;
    }

    private void OnInstrumentSelected(ChangeEventArgs changeEventArgs)
    {
        if (int.TryParse(changeEventArgs.Value?.ToString(), out int instrumentId))
        {
            selectedInstrument = allInstruments.Where(inst => inst.InstrumentId == instrumentId).FirstOrDefault();
            string instrumentName = selectedInstrument?.Name;
            disableEditInstrument = false;
        }
        else
        {
            disableEditInstrument = true;
        }
    }

    private void InstrumentEditor_AddInstrumentClicked(Instrument instrument)
    {
        DataManager.AddInstrument(instrument);
        EnableInteraction();
        allInstruments = DataManager.Instruments;
        selectedInstrument = allInstruments.Where(inst => inst.InstrumentId == instrument.InstrumentId).FirstOrDefault();
        instrumentEditor.Hide();
    }

    private void InstrumentEditor_UpdateInstrumentClicked(string message)
    {
        selectedInstrument = DataManager.UpdateInstrument(selectedInstrument);
        allInstruments = DataManager.Instruments;

        EnableInteraction();
        instrumentEditor.Hide();
    }

    private void InstrumentEditor_CancelClicked(string message)
    {
        if (selectedInstrument != null)
        {
            selectedInstrument = allInstruments.Where(inst => inst.InstrumentId == selectedInstrument.InstrumentId).FirstOrDefault();
        }

        instrumentErrorMessage = message;
        EnableInteraction();
        instrumentEditor.Hide();
    }

    private async Task NewInstrumentClicked()
    {
        instrumentErrorMessage = string.Empty;
        DisableInteraction();
        selectedInstrument = new Instrument();
        await instrumentEditor.Initialize(true);
    }

    private async Task EditInstrumentClicked()
    {
        DisableInteraction();
        await instrumentEditor.Initialize(false);
    }

    private void DeleteInstrumentClicked()
    {
        if (selectedInstrument != null)
        {
            instrumentErrorMessage = DataManager.DeleteInstrument(selectedInstrument);
            if (string.IsNullOrWhiteSpace(instrumentErrorMessage))
            {
                allInstruments.Remove(selectedInstrument);
                selectedInstrument = allInstruments.FirstOrDefault();
            }
        }
    }

    private void EnableInteraction()
    {
        disableEditInstrument = selectedInstrument == null;
        disableInstrumentList = false;
    }

    private void DisableInteraction()
    {
        disableEditInstrument = true;
        disableInstrumentList = true;
    }

    #endregion 

    #region Musicians

    string MusicianErrorMessage = "";
    Musician SelectedMusician;
    MusicianEditor musicianEditor;
    bool DisableMusicianControls = false;
    bool DisableMusicianEditButton = true;

    void EditMusicianCancelled(string message)
    {
        if (SelectedMusician != null)
        {
            SelectedMusician =
               (from x in DataManager.Musicians
                where x.MusicianId == SelectedMusician.MusicianId
                select x).FirstOrDefault();


        }
        DisableMusicianControls = false;
        DisableMusicianEditButton = (SelectedMusician == null);
    }

    void MusicianAdded(Musician Musician)
    {
        DataManager.AddMusician(Musician);
        DisableMusicianControls = false;
        DisableMusicianEditButton = (SelectedMusician == null);
        musicianEditor.Hide();
        MusicianErrorMessage = "";
    }

    void MusicianUpdated(Musician musician)
    {
        SelectedMusician = DataManager.UpdateMusician(musician);
        DisableMusicianControls = false;
        DisableMusicianEditButton = false;
        musicianEditor.Hide();
    }

    void MusicianSelected(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        SelectMusicianById(Convert.ToInt32(args.Value));
    }

    void SelectMusicianById(int Id)
    {
        MusicianErrorMessage = "";


        SelectedMusician =
           (from x in DataManager.Musicians
            where x.MusicianId.ToString() == Id.ToString()
            select x).FirstOrDefault();


        if (SelectedMusician != null)
        {
            DisableMusicianEditButton = false;
        }
        else
            DisableMusicianEditButton = true;
    }

    async Task NewMusicianButtonClick()
    {
        MusicianErrorMessage = "";
        DisableMusicianControls = true;
        DisableMusicianEditButton = true;
        await musicianEditor.NewMusician(DataManager.Instruments);
    }

    async Task EditMusicianButtonClick()
    {
        DisableMusicianControls = true;
        DisableMusicianEditButton = true;
        await musicianEditor.EditMusician(DataManager.Instruments,
          SelectedMusician);
    }

    void DeleteMusicianButtonClick()
    {
        if (SelectedMusician != null)
        {
            MusicianErrorMessage =
              DataManager.DeleteMusician(SelectedMusician, false);
            if (DataManager.Musicians.Count == 1)
            {
                SelectedMusician = DataManager.Musicians.First();
            }
        }
    }

    #endregion
}
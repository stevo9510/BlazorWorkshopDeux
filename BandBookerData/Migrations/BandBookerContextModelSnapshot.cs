// <auto-generated />
using System;
using BandBookerData.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BandBookerData.Migrations
{
    [DbContext(typeof(BandBookerContext))]
    partial class BandBookerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BandBookerData.Models.Band", b =>
                {
                    b.Property<int>("BandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("BandId");

                    b.ToTable("Band");
                });

            modelBuilder.Entity("BandBookerData.Models.BandMusician", b =>
                {
                    b.Property<int>("BandMusicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BandId")
                        .HasColumnType("int");

                    b.Property<int>("MusicianId")
                        .HasColumnType("int");

                    b.HasKey("BandMusicianId");

                    b.HasIndex("BandId");

                    b.HasIndex("MusicianId");

                    b.ToTable("BandMusician");
                });

            modelBuilder.Entity("BandBookerData.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BandId")
                        .HasColumnType("int");

                    b.Property<bool>("Booked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateBooked")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PayOffering")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("BandId");

                    b.HasIndex("VenueId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("BandBookerData.Models.BookingInstrument", b =>
                {
                    b.Property<int>("BookingInstrumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("InstrumentId")
                        .HasColumnType("int");

                    b.HasKey("BookingInstrumentId");

                    b.HasIndex("BookingId");

                    b.HasIndex("InstrumentId");

                    b.ToTable("BookingInstrument");
                });

            modelBuilder.Entity("BandBookerData.Models.BookingMusicianInstrument", b =>
                {
                    b.Property<int>("BookingMusicianInstrumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<int?>("InstrumentId")
                        .HasColumnType("int");

                    b.Property<int>("MusicianId")
                        .HasColumnType("int");

                    b.Property<bool?>("Response")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ResponseReason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookingMusicianInstrumentId");

                    b.HasIndex("BookingId");

                    b.HasIndex("InstrumentId");

                    b.HasIndex("MusicianId");

                    b.ToTable("BookingMusicianInstrument");
                });

            modelBuilder.Entity("BandBookerData.Models.Instrument", b =>
                {
                    b.Property<int>("InstrumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("InstrumentId");

                    b.ToTable("Instrument");
                });

            modelBuilder.Entity("BandBookerData.Models.Musician", b =>
                {
                    b.Property<int>("MusicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("MusicianId");

                    b.ToTable("Musician");
                });

            modelBuilder.Entity("BandBookerData.Models.MusicianInstrument", b =>
                {
                    b.Property<int>("MusicianInstrumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InstrumentId")
                        .HasColumnType("int");

                    b.Property<int>("MusicianId")
                        .HasColumnType("int");

                    b.HasKey("MusicianInstrumentId");

                    b.HasIndex("InstrumentId");

                    b.HasIndex("MusicianId");

                    b.ToTable("MusicianInstrument");
                });

            modelBuilder.Entity("BandBookerData.Models.Venue", b =>
                {
                    b.Property<int>("VenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ContactMobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("VenueId");

                    b.ToTable("Venue");
                });

            modelBuilder.Entity("BandBookerData.Models.BandMusician", b =>
                {
                    b.HasOne("BandBookerData.Models.Band", "Band")
                        .WithMany("BandMusician")
                        .HasForeignKey("BandId")
                        .HasConstraintName("FK_BandMusician_Band")
                        .IsRequired();

                    b.HasOne("BandBookerData.Models.Musician", "Musician")
                        .WithMany("BandMusician")
                        .HasForeignKey("MusicianId")
                        .HasConstraintName("FK_BandMusician_ToMusician")
                        .IsRequired();
                });

            modelBuilder.Entity("BandBookerData.Models.Booking", b =>
                {
                    b.HasOne("BandBookerData.Models.Band", "Band")
                        .WithMany("Booking")
                        .HasForeignKey("BandId")
                        .HasConstraintName("FK_Booking_ToBand");

                    b.HasOne("BandBookerData.Models.Venue", "Venue")
                        .WithMany("Booking")
                        .HasForeignKey("VenueId")
                        .HasConstraintName("FK_Booking_ToVenue");
                });

            modelBuilder.Entity("BandBookerData.Models.BookingInstrument", b =>
                {
                    b.HasOne("BandBookerData.Models.Booking", "Booking")
                        .WithMany("BookingInstrument")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK_BookingInstrument_Booking")
                        .IsRequired();

                    b.HasOne("BandBookerData.Models.Instrument", "Instrument")
                        .WithMany("BookingInstrument")
                        .HasForeignKey("InstrumentId")
                        .HasConstraintName("FK_BookingInstrument_Instrument")
                        .IsRequired();
                });

            modelBuilder.Entity("BandBookerData.Models.BookingMusicianInstrument", b =>
                {
                    b.HasOne("BandBookerData.Models.Booking", "Booking")
                        .WithMany("BookingMusicianInstrument")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK_BookingMusicianInstrument_ToBooking")
                        .IsRequired();

                    b.HasOne("BandBookerData.Models.Instrument", "Instrument")
                        .WithMany("BookingMusicianInstrument")
                        .HasForeignKey("InstrumentId")
                        .HasConstraintName("FK_BookingMusicianInstrument_ToInstrument");

                    b.HasOne("BandBookerData.Models.Musician", "Musician")
                        .WithMany("BookingMusicianInstrument")
                        .HasForeignKey("MusicianId")
                        .HasConstraintName("FK_BookingMusicianInstrument_ToMusician")
                        .IsRequired();
                });

            modelBuilder.Entity("BandBookerData.Models.MusicianInstrument", b =>
                {
                    b.HasOne("BandBookerData.Models.Instrument", "Instrument")
                        .WithMany("MusicianInstrument")
                        .HasForeignKey("InstrumentId")
                        .HasConstraintName("FK_MusicianInstrument_Instrument")
                        .IsRequired();

                    b.HasOne("BandBookerData.Models.Musician", "Musician")
                        .WithMany("MusicianInstrument")
                        .HasForeignKey("MusicianId")
                        .HasConstraintName("FK_MusicianInstrument_ToMusician")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
